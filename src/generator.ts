import { SponsorShip, SponsorConfig } from './types'

export function genSvgImage(x: number, y: number, size: number, url: string) {
  return `<image x="${x}" y="${y}" width="${size}" height="${size}" xlink:href="${url}"/>`
}
export function generateBadge(
  x: number,
  y: number,
  {
    login,
    name,
    avatarUrl,
  }: Pick<SponsorShip['sponsor'], 'login' | 'name' | 'avatarUrl'>,
  {
    size,
    showName,
    textColor = '#333333',
  }: Pick<SponsorConfig, 'size' | 'showName' | 'textColor'>,
) {
  name = (name || login).trim()
  if (name.length > 12) {
    if (name.includes(' ')) {
      name = name.split(' ')[0]
    } else {
      name = `${name.slice(0, 10)}...`
    }
  }
  return `
<a xlink:href="https://github.com/${login}" class="sponsors-svg" target="_blank" id="${login}">
  ${
    showName
      ? `<text x="${x + size / 2}" y="${
          y + size + 18
        }" text-anchor="middle" class="name" fill="${textColor}">${name}</text>`
      : ''
  }
  ${genSvgImage(x, y, size, avatarUrl)}
</a>`.trim()
}

export const PRESET_GOLD_SPONSOR = {
  size: 70,
  width: 90,
  height: 115,
  gridPadding: 60,
  showName: true,
}
export const PRESET_SLIVER_SPONSOR = {
  size: 50,
  width: 80,
  height: 90,
  gridPadding: 50,
  showName: true,
}
export const PRESET_BACKER = {
  size: 40,
  width: 48,
  height: 48,
  gridPadding: 50,
  showName: false,
}

export class SvgComposer {
  width: number
  height: number
  body: string

  constructor(width = 700) {
    this.width = width
    this.height = 0
    this.body = ''
  }

  addSpan(height = 10) {
    this.height += height
    return this
  }

  addTitle(text: string) {
    this.body += `<text x="${this.width / 2}" y="${
      this.height
    }" text-anchor="middle" class="title">${text}</text>`
    this.height += 20
    return this
  }

  addLine(sponsors: SponsorShip[], config: SponsorConfig) {
    const offsetX =
      (this.width - sponsors.length * config.width) / 2 +
      (config.width - config.size) / 2
    this.body += sponsors
      .map((s, i) => {
        const x = offsetX + config.width * i
        const y = this.height
        return generateBadge(x, y, s.sponsor, config)
      })
      .join('\n')
    this.height += config.height
  }

  addSponsorGrid(sponsors: SponsorShip[], config: SponsorConfig) {
    const perLine = Math.floor(
      (this.width - config.gridPadding * 2) / config.width,
    )
    new Array(Math.ceil(sponsors.length / perLine)).fill(0).forEach((_, i) => {
      this.addLine(sponsors.slice(i * perLine, (i + 1) * perLine), config)
    })
    return this
  }

  generateSvg() {
    return `
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${this.width}" height="${this.height}">
  <!-- Generated by https://github.com/2nthony/sponsors-cli -->
  <style>
    .sponsors-svg { cursor: pointer; } 
    text { 
      font-weight: 300;
      font-size: 14px;
      fill: #777777;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    .title {
      font-weight: 500;
      font-size: 20px;
    }
  </style>
  ${this.body}
</svg>
`
  }
}
